package com.cjyun.heartakecare.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_DB".
*/
public class RecordDBDao extends AbstractDao<RecordDB, Long> {

    public static final String TABLENAME = "RECORD_DB";

    /**
     * Properties of entity RecordDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property ProjectName = new Property(3, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ConsultValue = new Property(4, String.class, "consultValue", false, "CONSULT_VALUE");
        public final static Property CheckResult = new Property(5, String.class, "checkResult", false, "CHECK_RESULT");
        public final static Property Symptom = new Property(6, String.class, "symptom", false, "SYMPTOM");
        public final static Property Clinical = new Property(7, String.class, "clinical", false, "CLINICAL");
    }


    public RecordDBDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT UNIQUE ," + // 1: name
                "\"DATE\" TEXT," + // 2: date
                "\"PROJECT_NAME\" TEXT," + // 3: projectName
                "\"CONSULT_VALUE\" TEXT," + // 4: consultValue
                "\"CHECK_RESULT\" TEXT," + // 5: checkResult
                "\"SYMPTOM\" TEXT," + // 6: symptom
                "\"CLINICAL\" TEXT);"); // 7: clinical
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(4, projectName);
        }
 
        String consultValue = entity.getConsultValue();
        if (consultValue != null) {
            stmt.bindString(5, consultValue);
        }
 
        String checkResult = entity.getCheckResult();
        if (checkResult != null) {
            stmt.bindString(6, checkResult);
        }
 
        String symptom = entity.getSymptom();
        if (symptom != null) {
            stmt.bindString(7, symptom);
        }
 
        String clinical = entity.getClinical();
        if (clinical != null) {
            stmt.bindString(8, clinical);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(4, projectName);
        }
 
        String consultValue = entity.getConsultValue();
        if (consultValue != null) {
            stmt.bindString(5, consultValue);
        }
 
        String checkResult = entity.getCheckResult();
        if (checkResult != null) {
            stmt.bindString(6, checkResult);
        }
 
        String symptom = entity.getSymptom();
        if (symptom != null) {
            stmt.bindString(7, symptom);
        }
 
        String clinical = entity.getClinical();
        if (clinical != null) {
            stmt.bindString(8, clinical);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordDB readEntity(Cursor cursor, int offset) {
        RecordDB entity = new RecordDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // projectName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // consultValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // checkResult
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // symptom
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // clinical
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setConsultValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckResult(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSymptom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClinical(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
